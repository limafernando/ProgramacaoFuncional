#lang racket

;1

(define a 42)

;2

(define b 14)

;3

(+ a b)
(- a b)
(+ a (* 3 b) 7)
(/ (+ a b) 2)
(sqrt (* a b))

(/ 2
   (+ (/ 1 a)
      (/ 1 b)
      )
   )

;4

(define soma-medias
  (+ (/ (+ a b) 2)
   (/ 2 (+ (/ 1 a) (/ 1 b)))))

soma-medias

;5

(if (= soma-medias 49) "teste 1 ok" "teste 1 falhou")

;6

(define (quadrado n) (* n n))

(quadrado 2)
(quadrado -2)
(quadrado 10)

;7

(define (delta a b c)
  (- (quadrado b)
     (* 4 a c)))

(define (raiz-positiva a b c)
  (/ (+ (- b) (sqrt (delta a b c)))
     (* 2 a)))

;8

(define (potencia x y)
  (if (> y 0) (* x (potencia x (- y 1))) 1))

(potencia 2 3)
(potencia 2 4)
(potencia 2 0)

;extra
(potencia 2 -1)